1. Upload to S3
  - customer.tbl
  - nation.tbl
  - region.tbl
  - rates.tbl
  - orders.tbl
  - lineitem.tbl

In Hive: --> Everything batch related

- dev_region
- prod_region
- dev_nation
- prod_nation
- dev_customer
- prod_customer
- dev_rates
- prod_rates
- dev_orders
- dev_lineitem

In YAML: --> Everything streaming related
- prod_orders
- prod_orders_sink
- prod_lineitem
- prod_lineitem_sink
- prod_rates_temporal
- prod_rates_history_sink
- prod_rates_history

During Demo: --> Everything streaming related that can be stored in Hive
- prod_orders


2. Prepare MySQL

CREATE TABLE PROD_REGION (
  R_REGIONKEY     INTEGER        NOT NULL,
  R_NAME          CHAR(25)       NOT NULL,
  R_COMMENT       VARCHAR(152)   NOT NULL
);

CREATE TABLE PROD_NATION (
  N_NATIONKEY     INTEGER        NOT NULL,
  N_NAME          CHAR(25)       NOT NULL,
  N_REGIONKEY     INTEGER        NOT NULL,
  N_COMMENT       VARCHAR(152)   NOT NULL
);

CREATE TABLE PROD_CUSTOMER (
  C_CUSTKEY       INTEGER        NOT NULL,
  C_NAME          VARCHAR(25)    NOT NULL,
  C_ADDRESS       VARCHAR(40)    NOT NULL,
  C_NATIONKEY     INTEGER        NOT NULL,
  C_PHONE         CHAR(15)       NOT NULL,
  C_ACCTBAL       DOUBLE         NOT NULL,
  C_MKTSEGMENT    CHAR(10)       NOT NULL,
  C_COMMENT       VARCHAR(117)   NOT NULL
);

CREATE TABLE PROD_RATES (
  RS_TIMESTAMP    TIMESTAMP(3)   NOT NULL,
  RS_SYMBOL       CHAR(3)        NOT NULL,
  RS_RATE         DOUBLE         NOT NULL
);

INSERT INTO PROD_RATES VALUES (TIMESTAMP '2020-04-19 10:01:52.154', 'EUR', 1.0000);
INSERT INTO PROD_RATES VALUES (TIMESTAMP '2020-04-19 10:01:52.154', 'CHF', 1.0588);
INSERT INTO PROD_RATES VALUES (TIMESTAMP '2020-04-19 10:01:52.154', 'HKD', 8.3201);
INSERT INTO PROD_RATES VALUES (TIMESTAMP '2020-04-19 10:01:52.154', 'JPY', 114.9208);
INSERT INTO PROD_RATES VALUES (TIMESTAMP '2020-04-19 10:01:52.154', 'GBP', 0.9213);
INSERT INTO PROD_RATES VALUES (TIMESTAMP '2020-04-19 10:01:52.154', 'USD', 1.1060);
INSERT INTO PROD_RATES VALUES (TIMESTAMP '2020-04-19 10:01:52.154', 'CAD', 1.5628);
INSERT INTO PROD_RATES VALUES (TIMESTAMP '2020-04-19 10:01:52.154', 'NOK', 10.9257);
INSERT INTO PROD_RATES VALUES (TIMESTAMP '2020-04-19 10:01:52.154', 'RUB', 81.2930);
INSERT INTO PROD_RATES VALUES (TIMESTAMP '2020-04-19 10:01:52.154', 'CNY', 8.0166);

3. Move data into MySQL

CREATE TABLE dev_region (
  r_regionkey     INTEGER,
  r_name          STRING,
  r_comment       STRING
) WITH (
  'connector.type' = 'filesystem',
  'connector.path' = 's3://sql-demo/region.tbl',
  'format.type' = 'csv',
  'format.field-delimiter' = '|'
);

CREATE TABLE prod_region (
  r_regionkey     INTEGER,
  r_name          STRING,
  r_comment       STRING
) WITH (
  'connector.type' = 'jdbc',
  'connector.url' = 'jdbc:mysql://mysql:3306/sql-demo',
  'connector.table' = 'PROD_REGION',
  'connector.driver' = 'com.mysql.jdbc.Driver',
  'connector.username' = 'sql-demo',
  'connector.password' = 'demo-sql',
  'connector.lookup.cache.max-rows' = '1',
  'connector.lookup.cache.ttl' = '0s'
);

INSERT INTO prod_region SELECT * FROM dev_region;

SELECT * FROM prod_region;

CREATE TABLE dev_nation (
  n_nationkey     INTEGER,
  n_name          STRING,
  n_regionkey     INTEGER,
  n_comment       STRING
) WITH (
  'connector.type' = 'filesystem',
  'connector.path' = 's3://sql-demo/nation.tbl',
  'format.type' = 'csv',
  'format.field-delimiter' = '|'
);

CREATE TABLE prod_nation (
  n_nationkey     INTEGER,
  n_name          STRING,
  n_regionkey     INTEGER,
  n_comment       STRING
) WITH (
  'connector.type' = 'jdbc',
  'connector.url' = 'jdbc:mysql://mysql:3306/sql-demo',
  'connector.table' = 'PROD_NATION',
  'connector.driver' = 'com.mysql.jdbc.Driver',
  'connector.username' = 'sql-demo',
  'connector.password' = 'demo-sql',
  'connector.lookup.cache.max-rows' = '1',
  'connector.lookup.cache.ttl' = '0s'
);

INSERT INTO prod_nation SELECT * FROM dev_nation;

SELECT * FROM prod_nation;

CREATE TABLE dev_customer (
  c_custkey       INTEGER,
  c_name          STRING,
  c_address       STRING,
  c_nationkey     INTEGER,
  c_phone         STRING,
  c_acctbal       DOUBLE,
  c_mktsegment    STRING,
  c_comment       STRING
) WITH (
  'connector.type' = 'filesystem',
  'connector.path' = 's3://sql-demo/customer.tbl',
  'format.type' = 'csv',
  'format.field-delimiter' = '|'
);

CREATE TABLE prod_customer (
  c_custkey       INTEGER,
  c_name          STRING,
  c_address       STRING,
  c_nationkey     INTEGER,
  c_phone         STRING,
  c_acctbal       DOUBLE,
  c_mktsegment    STRING,
  c_comment       STRING
) WITH (
  'connector.type' = 'jdbc',
  'connector.url' = 'jdbc:mysql://mysql:3306/sql-demo',
  'connector.table' = 'PROD_CUSTOMER',
  'connector.driver' = 'com.mysql.jdbc.Driver',
  'connector.username' = 'sql-demo',
  'connector.password' = 'demo-sql',
  'connector.lookup.cache.max-rows' = '1',
  'connector.lookup.cache.ttl' = '0s'
);

INSERT INTO prod_customer SELECT * FROM dev_customer;

SELECT * FROM prod_customer;

CREATE TABLE dev_rates (
  rs_timestamp    TIMESTAMP(3),
  rs_symbol       STRING,
  rs_rate         DOUBLE
) WITH (
  'connector.type' = 'filesystem',
  'connector.path' = 's3://sql-demo/rates.tbl',
  'format.type' = 'csv',
  'format.field-delimiter' = '|'
);


INSERT INTO prod_rates_history_sink SELECT * FROM dev_rates;

CREATE TABLE prod_rates (
  rs_timestamp    TIMESTAMP(3),
  rs_symbol       STRING,
  rs_rate         DOUBLE
) WITH (
  'connector.type' = 'jdbc',
  'connector.url' = 'jdbc:mysql://mysql:3306/sql-demo',
  'connector.table' = 'PROD_RATES',
  'connector.driver' = 'com.mysql.jdbc.Driver',
  'connector.username' = 'sql-demo',
  'connector.password' = 'demo-sql',
  'connector.lookup.cache.max-rows' = '1',
  'connector.lookup.cache.ttl' = '0s'
);

SELECT * FROM prod_rates;

3. Run window query

CREATE TABLE dev_orders (
  o_orderkey      INTEGER,
  o_custkey       INTEGER,
  o_orderstatus   STRING,
  o_totalprice    DOUBLE,
  o_currency      STRING,
  o_ordertime     TIMESTAMP(3),
  o_orderpriority STRING,
  o_clerk         STRING, 
  o_shippriority  INTEGER,
  o_comment       STRING,
  WATERMARK FOR o_ordertime AS o_ordertime - INTERVAL '5' MINUTE
) WITH (
  'connector.type' = 'filesystem',
  'connector.path' = 's3://sql-demo/orders.tbl',
  'format.type' = 'csv',
  'format.field-delimiter' = '|'
);

CREATE TABLE prod_orders (
  o_orderkey      INTEGER,
  o_custkey       INTEGER,
  o_orderstatus   STRING,
  o_totalprice    DOUBLE,
  o_currency      STRING,
  o_ordertime     TIMESTAMP(3),
  o_orderpriority STRING,
  o_clerk         STRING,
  o_shippriority  INTEGER,
  o_comment       STRING,
  WATERMARK FOR o_ordertime AS o_ordertime - INTERVAL '5' MINUTE
) WITH (
  'connector.type' = 'kafka',
  'connector.version' = 'universal',
  'connector.topic' = 'Orders',
  'connector.properties.zookeeper.connect' = 'not-needed',
  'connector.properties.bootstrap.servers' = 'kafka:9092',
  'connector.startup-mode' = 'earliest-offset',
  'format.type' = 'csv',
  'format.field-delimiter' = '|'
);

SET execution.type=batch;

// revenue per currency and hour
SELECT
  CEIL(o_ordertime TO HOUR) AS `hour`,
  o_currency AS `currency`,
  SUM(o_totalprice) AS `revenue`
FROM dev_orders
GROUP BY
  o_currency,
  CEIL(o_ordertime TO HOUR);

SELECT
  TUMBLE_END(o_ordertime, INTERVAL '1' HOUR) AS `hour`,
  o_currency AS `currency`,
  SUM(o_totalprice) AS `revenue`
FROM dev_orders
GROUP BY
  o_currency,
  TUMBLE(o_ordertime, INTERVAL '1' HOUR);

SET execution.type=streaming;

3. Run different kind of joins

INSERT INTO prod_orders SELECT * FROM dev_orders;

SELECT * FROM prod_orders;

CREATE TABLE dev_lineitem (
  l_orderkey       INTEGER,
  l_partkey        INTEGER,
  l_suppkey        INTEGER,
  l_linenumber     INTEGER,
  l_quantity       DOUBLE,
  l_extendedprice  DOUBLE,
  l_discount       DOUBLE,
  l_tax            DOUBLE,
  l_currency       STRING,
  l_returnflag     STRING,
  l_linestatus     STRING,
  l_ordertime      TIMESTAMP(3),
  l_shipinstruct   STRING,
  l_shipmode       STRING,
  l_comment        STRING
) WITH (
  'connector.type' = 'filesystem',
  'connector.path' = 's3://sql-demo/lineitem.tbl',
  'format.type' = 'csv',
  'format.field-delimiter' = '|'
);

CREATE TABLE prod_lineitem (
  l_orderkey       INTEGER,
  l_partkey        INTEGER,
  l_suppkey        INTEGER,
  l_linenumber     INTEGER,
  l_quantity       DOUBLE,
  l_extendedprice  DOUBLE,
  l_discount       DOUBLE,
  l_tax            DOUBLE,
  l_currency       STRING,
  l_returnflag     STRING,
  l_linestatus     STRING,
  l_ordertime      TIMESTAMP(3),
  l_shipinstruct   STRING,
  l_shipmode       STRING,
  l_comment        STRING,
  WATERMARK FOR l_ordertime AS l_ordertime - INTERVAL '5' MINUTE,
  l_proctime       AS PROCTIME()
) WITH (
  'connector.type' = 'kafka',
  'connector.version' = 'universal',
  'connector.topic' = 'Lineitem',
  'connector.properties.zookeeper.connect' = 'not-needed',
  'connector.properties.bootstrap.servers' = 'kafka:9092',
  'connector.startup-mode' = 'earliest-offset',
  'format.type' = 'csv',
  'format.field-delimiter' = '|'
);

INSERT INTO prod_lineitem SELECT * FROM dev_lineitem;

SELECT * FROM prod_lineitem;

// batch join for day reporting
// show customers and their orders by region and priority
SELECT
  r_name AS `region`,
  o_orderpriority AS `priority`,
  COUNT(DISTINCT c_custkey) AS `number_of_customers`,
  COUNT(o_orderkey) AS `number_of_orders`
FROM dev_orders
JOIN prod_customer ON o_custkey = c_custkey
JOIN prod_nation ON c_nationkey = n_nationkey
JOIN prod_region ON n_regionkey = r_regionkey
WHERE
  FLOOR(o_ordertime TO DAY) = TIMESTAMP '2020-04-17 0:00:00.000'
  AND NOT o_orderpriority = '4-NOT SPECIFIED'
GROUP BY r_name, o_orderpriority
ORDER BY r_name, o_orderpriority; // remove this and we can execute it in streaming

// stream join
// show open lineitems with urgent order priority
SELECT
  o_ordertime AS `ordertime`,
  o_orderkey AS `order`,
  l_linenumber AS `linenumber`,
  l_partkey AS `part`,
  l_suppkey AS `supplier`,
  l_quantity AS `quantity`
FROM prod_lineitem
JOIN prod_orders ON o_orderkey = l_orderkey
WHERE
  l_ordertime BETWEEN o_ordertime - INTERVAL '5' MINUTE AND o_ordertime AND
  l_linestatus = 'O' AND
  o_orderpriority = '1-URGENT';

// enrichment join with lookup for rates
// show open lineitems with approximately revenue in Euro
SELECT
  l_proctime AS `querytime`,
  l_orderkey AS `order`,
  l_linenumber AS `linenumber`,
  (l_extendedprice * (1 - l_discount) * (1 + l_tax)) / rs_rate AS `open in euro`
FROM prod_lineitem
JOIN prod_rates FOR SYSTEM_TIME AS OF l_proctime ON rs_symbol = l_currency
WHERE
  l_linestatus = 'O';

// enrichment join with temporal table for rates
// show open lineitems with correct revenue in Euro
SELECT
  l_ordertime AS `ordertime`,
  l_orderkey AS `order`,
  l_linenumber AS `linenumber`,
  (l_extendedprice * (1 - l_discount) * (1 + l_tax)) / rs_rate AS `open in euro`
FROM
  prod_lineitem,
  LATERAL TABLE(prod_rates_temporal(l_ordertime))
WHERE rs_symbol = l_currency AND
  l_linestatus = 'O';

// MATCH_RECOGNIZE
// change in ship instruct behavior
CREATE VIEW lineitem_with_customer AS
SELECT * FROM (
  SELECT
    o_custkey AS `custkey`,
    l_orderkey AS `orderkey`,
    l_linenumber AS `linenumber`,
    l_ordertime AS `ordertime`,
    l_shipinstruct AS `shipinstruct`
  FROM prod_lineitem
  JOIN prod_orders ON o_orderkey = l_orderkey
  WHERE
    l_ordertime BETWEEN o_ordertime - INTERVAL '5' MINUTE AND o_ordertime
);

SELECT *
FROM lineitem_with_customer
MATCH_RECOGNIZE(
  PARTITION BY custkey
  ORDER BY ordertime
  MEASURES
    COUNT(OTHER.orderkey) AS `last regular shipings`,
    LAST(OTHER.orderkey) AS `last regular order`,
    LAST(OTHER.linenumber) AS `last regular linenumber`,
    COD.orderkey AS `cod order`,
    COD.linenumber AS `cod linenumber`
  PATTERN (OTHER{15,} COD)
  DEFINE
    OTHER AS NOT shipinstruct = 'COLLECT COD',
    COD AS shipinstruct = 'COLLECT COD'
);


// items per hour and customer distribution
CREATE VIEW customer_items_per_hour AS
  SELECT custkey, COUNT(*) AS items_per_hour
  FROM lineitem_with_customer
  GROUP BY custkey, TUMBLE(ordertime, INTERVAL '1' HOUR);

SELECT items_per_hour, COUNT(*) FROM customer_items_per_hour GROUP BY items_per_hour;
